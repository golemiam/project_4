import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;

public class MonoCards {
	private static int commPlace = -1;
	private static int cCPlace = -1;
	private static List<Integer> cCCards;
	private static List<Integer> cCards;

	public static void main(String[] args) {
		//Hashmap of Community Chest cards, mostly for vanity to see what each card actually is.		
		HashMap<Integer, String> CommunityChestCards = new HashMap<Integer, String>();
		CommunityChestCards.put(0, "Advance to Go!");
		CommunityChestCards.put(1, "Bank Error.");
		CommunityChestCards.put(2, "Doctor Fee.");
		CommunityChestCards.put(3, "Sale of Stock.");
		CommunityChestCards.put(4, "Get out of Jail Free.");
		CommunityChestCards.put(5, "Go to Jail.");
		CommunityChestCards.put(6, "Holiday funds mature.");
		CommunityChestCards.put(7, "Income Tax Refund.");
		CommunityChestCards.put(8, "Birthday!");
		CommunityChestCards.put(9, "Life Insurance.");
		CommunityChestCards.put(10, "Pay Hospital.");
		CommunityChestCards.put(11, "Pay School Fees.");
		CommunityChestCards.put(12, "Consiltancy Fee.");
		CommunityChestCards.put(13, "Assessed Street Repair.");
		CommunityChestCards.put(14, "Won second prize.");
		CommunityChestCards.put(15, "Inheiritence.");	
		
		//Turing our KeyValuePair HashMap into an int array to save space in sim.
		cCCards = new ArrayList<>(CommunityChestCards.keySet());
		
		//Hashmap of Chance cards, mostly for vanity to see what each card actually is.
		HashMap<Integer, String> ChanceCards = new HashMap<Integer, String>();
		ChanceCards.put(0, "Advance to Boardwalk.");
		ChanceCards.put(1, "Advance to Go!");
		ChanceCards.put(2, "Advance to Illinois Avenue.");
		ChanceCards.put(3, "Advance to St. Charles Place.");
		ChanceCards.put(4, "Advance to the nearest Railroad.");
		ChanceCards.put(5, "Advance to the nearest Railroad.");
		ChanceCards.put(6, "Advance token to nearest Utility.");
		ChanceCards.put(7, "Bank pays you dividend");
		ChanceCards.put(8, "Get Out of Jail Free");
		ChanceCards.put(9, "Go Back 3 Spaces");
		ChanceCards.put(10, "Go to Jail.");
		ChanceCards.put(11, "General Repairs");
		ChanceCards.put(12, "Speeding fine");
		ChanceCards.put(13, "Take a trip to Reading Railroad.");
		ChanceCards.put(14, "Chairman of the Board.");
		ChanceCards.put(15, "Building Loan");
		
		//Turing our KeyValuePair HashMap into an int array to save space in sim.
		cCards = new ArrayList<>(ChanceCards.keySet());
		
		shuffleDeck(cCCards);
		System.out.println(cCCards);
		
		for (int i = 0; i < 27; i++) {
			System.out.print(drawComm(0) + ", ");
			if (commPlace == 15) {
				System.out.println();
			}
		}
		
		System.out.println();
		System.out.println();
		shuffleDeck(cCards);
		System.out.println(cCards);
		
		for (int i = 0; i < 27; i++) {
			System.out.print(drawChance(0) + ", ");
			if (cCPlace == 15) {
				System.out.println();
			}
		}
		
		
		
		//System.out.println();
		//System.out.println(CCShuffled);	
	}
	
	public static void shuffleDeck(List<Integer> deck) { 
		Collections.shuffle(deck);
	}
	
	
	public static int drawComm (int place) {
		//Increment the card we are looking at.
		commPlace++;
		
		//If we look at a number outside the deck, we are at the end of the deck
		//Change to look at first card and shuffle deck. (Basically reset)
		if(commPlace >= 16) {
			commPlace = 0;
			Collections.shuffle(cCCards);
			System.out.println(cCCards);
		}
		
		//Look that the value of the card we drew.
		int effect = cCCards.get(commPlace);
		
		//TODO //Determine effect if there is an effect
		switch(effect) {
			case 1: return 1/*Where go is.*/;
			
			case 4: return 4/*Get out of jail free card = true*/;
					//break;
					
			case 5: /*In Jail + */ return 5/*Where jail is.*/;
		
			default: return place;
		}
	}
	
	public static int drawChance (int place) {
		//Increment the card we are looking at.
		cCPlace++;
		
		//If we look at a number outside the deck, we are at the end of the deck
		//Change to look at first card and shuffle deck. (Basically reset)
		if(cCPlace >= 16) {
			cCPlace = 0;
			Collections.shuffle(cCards);
			System.out.println(cCards);
		}
		
		//Look that the value of the card we drew.
		int effect = cCards.get(cCPlace);
		
		switch(effect) {
		case 0: return 0 /*Where Boardwalk is.*/;
		case 1: return 1 /*Where go is.*/;
		case 2: return 2 /*Where Illinois Avenue is.*/;
		case 3: return 3 /*Where St. Charles Place is.*/;
		case 4: return 999 /*Where the nearest Railroad is.*/; //TODO Needs more work to implement!!@!!!/
		case 5: return 999 /*Where the nearest Railroad is.*/; //TODO Needs more work to implement!!@!!!/
		case 6: return 999 /*Where nearest Utility is.*/;     //TODO Needs more work to implement!!@!!!/
		case 8: return 8 /*Get out of jail free card = true.*/;
		case 9: return 100 /*place - 3*/;
		case 10: return 10 /*Where jail is. + In jail*/;
		case 13: return 13 /*Where Reading railroad is.*/;
		default: return place;
		}
	}
}
